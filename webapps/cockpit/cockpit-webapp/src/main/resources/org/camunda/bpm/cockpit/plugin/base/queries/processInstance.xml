<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cockpit.base">

  <resultMap id="processInstanceMap" type="org.camunda.bpm.cockpit.plugin.base.persistence.entity.ProcessInstanceDto">
    <id property="id" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="businessKey" column="BUSINESS_KEY_" jdbcType="VARCHAR" />
    <result property="startTime" column="START_TIME_" jdbcType="TIMESTAMP"/>
    <result property="localFailedJobs" column="LOCAL_FAILED_JOBS_" jdbcType="INTEGER" />
    <result property="child1FailedJobs" column="CHILD_1_OF_LOCAL_FAILED_JOBS_" jdbcType="INTEGER" />
    <result property="child2FailedJobs" column="CHILD_2_OF_CHILD_1_FAILED_JOBS_" jdbcType="INTEGER" />
    <result property="child3FailedJobs" column="CHILD_3_OF_CHILD_2_FAILED_JOBS_" jdbcType="INTEGER" />
  </resultMap>

  <select id="selectRunningProcessInstances" parameterType="org.camunda.bpm.cockpit.plugin.base.resources.ProcessInstanceQueryParameter" resultMap="processInstanceMap">
    ${limitBefore}
    
    select
      l0_proc_inst.PROC_INST_ID_,
      l0_proc_inst.BUSINESS_KEY_,
      count(l0_job.RETRIES_) LOCAL_FAILED_JOBS_,
      count(l1_job.RETRIES_) CHILD_1_OF_LOCAL_FAILED_JOBS_,
      count(l2_job.RETRIES_) CHILD_2_OF_CHILD_1_FAILED_JOBS_,
      count(l3_job.RETRIES_) CHILD_3_OF_CHILD_2_FAILED_JOBS_,
      <if test="historyEnabled">
        hist.START_TIME_
      </if>
      <if test="!historyEnabled">
        null START_TIME_
      </if>
      
    from
      ACT_RU_EXECUTION l0_proc_inst
      <if test="historyEnabled">
        left join
          ACT_HI_ACTINST hist
        on
          hist.PROC_INST_ID_ = l0_proc_inst.PROC_INST_ID_ and hist.ACT_TYPE_ = 'startEvent'
      </if>  
      
    <!-- Level 0 -->
    left join
      ACT_RU_JOB l0_job
    on
      l0_proc_inst.ID_ = l0_job.PROCESS_INSTANCE_ID_ and l0_job.RETRIES_ = 0
    
    <!-- Level 1 -->
    left join
      ACT_RU_EXECUTION l1_exec
    on
      l1_exec.SUPER_EXEC_ = l0_proc_inst.ID_
    left join
      ACT_RU_EXECUTION l1_proc_inst 
    on
     l1_proc_inst.PROC_INST_ID_ = l1_exec.PROC_INST_ID_
    left join
      ACT_RU_JOB l1_job
    on
      l1_proc_inst.ID_ = l1_job.PROCESS_INSTANCE_ID_ and l1_job.RETRIES_ = 0
    
    <!-- Level 2 -->
    left join
      ACT_RU_EXECUTION l2_exec
    on
      l2_exec.SUPER_EXEC_ = l1_proc_inst.ID_
    left join
      ACT_RU_EXECUTION l2_proc_inst 
    on
     l2_proc_inst.PROC_INST_ID_ = l2_exec.PROC_INST_ID_
    left join
      ACT_RU_JOB l2_job
    on
      l2_proc_inst.ID_ = l2_job.PROCESS_INSTANCE_ID_ and l2_job.RETRIES_ = 0
    
    <!-- Level 3 -->
    left join
      ACT_RU_EXECUTION l3_exec
    on
      l3_exec.SUPER_EXEC_ = l2_proc_inst.ID_
    left join
      ACT_RU_EXECUTION l3_proc_inst 
    on
     l3_proc_inst.PROC_INST_ID_ = l3_exec.PROC_INST_ID_
    left join
      ACT_RU_JOB l3_job
    on
      l3_proc_inst.ID_ = l3_job.PROCESS_INSTANCE_ID_ and l3_job.RETRIES_ = 0
    
    where
      l0_proc_inst.PROC_DEF_ID_ = #{processDefinitionId}
    
    group by
      l0_proc_inst.PROC_INST_ID_
    <if test="historyEnabled">
      order by
        hist.START_TIME_ desc
    </if>
 
    ${limitAfter}
  </select>

</mapper>
