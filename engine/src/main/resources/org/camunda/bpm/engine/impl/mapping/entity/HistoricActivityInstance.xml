<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.camunda.bpm.engine.impl.persistence.entity.HistoricActivityInstanceEntity">

  <!-- 
  
  NOTE:
  
  HAIs are stored as update events. For each HAI, there are usually two update 
  events which correspond to two lines in the DB:
     
    * a first line added when the activity is started
    * a second line added when the activity is ended  
  
  The first part of this file contains the mappings for these update events. 
  
  When querying the DB, we are usually interested in an aggregated 
  representation which combines the data contained in both update events as an individual 
  object. The second part of this file contains aggregation queries which allows retrieving 
  HAIs as single lines / objects.     
    
  -->
  
  <!-- /////////////////// start mappings for HistoricActivityInstanceEvent //////////////////// -->

  <resultMap id="historicActivityInstanceEventResultMap" type="org.camunda.bpm.engine.impl.history.event.HistoricActivityInstanceEventEntity">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="timestamp" column="TIMESTAMP_" jdbcType="TIMESTAMP" />
    <result property="activityId" column="ACT_ID_" jdbcType="VARCHAR" />
    <result property="activityName" column="ACT_NAME_" jdbcType="VARCHAR" />
    <result property="activityType" column="ACT_TYPE_" jdbcType="VARCHAR" />
    <result property="activityInstanceId" column="ACT_INST_ID_" jdbcType="VARCHAR" />
    <result property="parentActivityInstanceId" column="PARENT_ACT_INST_ID_" jdbcType="VARCHAR" />
    <result property="eventType" column="EVENT_TYPE_" jdbcType="VARCHAR" />
  </resultMap>
  
  <insert id="insertHistoricActivityInstanceEvent" parameterType="org.camunda.bpm.engine.impl.history.event.HistoricActivityInstanceEventEntity">
      insert into ${prefix}ACT_HI_ACTINST (
        ID_,
        PROC_DEF_ID_,
        PROC_INST_ID_,
        EXECUTION_ID_,
        TIMESTAMP_,
        ACT_ID_,
        ACT_NAME_,
        ACT_TYPE_,
        ACT_INST_ID_,
        PARENT_ACT_INST_ID_,
        EVENT_TYPE_             
      ) values (
        #{id ,jdbcType=VARCHAR},
        #{processDefinitionId, jdbcType=VARCHAR},
        #{processInstanceId, jdbcType=VARCHAR},
        #{executionId, jdbcType=VARCHAR},
        #{timestamp, jdbcType=TIMESTAMP},
        #{activityId ,jdbcType=VARCHAR},
        #{activityName ,jdbcType=VARCHAR},
        #{activityType ,jdbcType=VARCHAR},
        #{activityInstanceId ,jdbcType=VARCHAR},
        #{parentActivityInstanceId ,jdbcType=VARCHAR},
        #{eventType ,jdbcType=VARCHAR}      
      )
  </insert>
  
  <select id="selectHistoricActivityInstanceEvent" resultMap="historicActivityInstanceEventResultMap">
    SELECT *       
    FROM 
      ${prefix}ACT_HI_ACTINST      
    WHERE 
      ID_ = #{id}    
  </select>
  
  <delete id="deleteHistoricActivityInstancesByProcessInstanceId">
    delete from ${prefix}ACT_HI_ACTINST where PROC_INST_ID_ = #{processInstanceId}
  </delete>
  
  <!-- /////////////////// start mappings for HistoricProcessInstance //////////////////// -->

  <!-- HISTORIC ACTIVITY INSTANCE RESULT MAP -->
  <!-- this is the aggregated HAI -->

  <resultMap id="historicActivityInstanceResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.HistoricActivityInstanceEntity">
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="activityId" column="ACT_ID_" jdbcType="VARCHAR" />
    <result property="activityName" column="ACT_NAME_" jdbcType="VARCHAR" />
    <result property="activityType" column="ACT_TYPE_" jdbcType="VARCHAR" />
    <result property="taskId" column="TASK_ID_" jdbcType="VARCHAR" />
    <result property="calledProcessInstanceId" column="CALL_PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="assignee" column="ASSIGNEE_" jdbcType="VARCHAR" />
    <result property="startTime" column="START_TIME_" jdbcType="TIMESTAMP" />
    <result property="endTime" column="END_TIME_" jdbcType="TIMESTAMP" />
    <result property="durationInMillis" column="DURATION_" jdbcType="BIGINT" />
  </resultMap>
  
  <select id="selectHistoricActivityInstance" resultMap="historicActivityInstanceResultMap">
    SELECT distinct
      A1.PROC_DEF_ID_ as PROC_DEF_ID_ ,
      A1.PROC_INST_ID_  as PROC_INST_ID_,
      A1.EXECUTION_ID_ as EXECUTION_ID_ ,
      A1.ACT_ID_ as ACT_ID_ , 
      A1.ACT_NAME_ as ACT_NAME_ ,
      A1.ACT_TYPE_ as ACT_TYPE_ ,
      A1.ACT_INST_ID_ as ACT_INST_ID_ ,
      A1.PARENT_ACT_INST_ID_ as PARENT_ACT_INST_ID_ ,
      A1.TASK_ID_ as TASK_ID_,
      A1.CALL_PROC_INST_ID_ as CALL_PROC_INST_ID_ ,
      A1.ASSIGNEE_ as ASSIGNEE_,
      A1.TIMESTAMP_ as START_TIME_,
      A2.TIMESTAMP_ as END_TIME_,
      DATEDIFF(ms, A1.TIMESTAMP_ , A2.TIMESTAMP_ ) as DURATION_
    
    FROM
      ${prefix}ACT_HI_ACTINST A1
    LEFT JOIN 
      ${prefix}ACT_HI_ACTINST A2 
      ON
        A1.ACT_INST_ID_ = A2.ACT_INST_ID_ 
      AND
        A2.EVENT_TYPE_ = 'end'
    
    WHERE
      A1.EVENT_TYPE_ = 'start'
  </select>

  <select id="selectHistoricActivityInstancesByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.HistoricActivityInstanceQueryImpl" resultMap="historicActivityInstanceResultMap">
    ${limitBefore}
    select ${limitBetween}
    RES.*
    <include refid="selectHistoricActivityInstancesByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </select>
  
  <select id="selectHistoricActivityInstanceCountByQueryCriteria" parameterType="org.camunda.bpm.engine.impl.HistoricActivityInstanceQueryImpl" resultType="long">
    select count(*)
    <include refid="selectHistoricActivityInstancesByQueryCriteriaSql"/>
  </select>
  
  <sql id="selectHistoricActivityInstancesByQueryCriteriaSql">
    from ${prefix}ACT_HI_ACTINST RES
    <where>
      <if test="processInstanceId != null">
        RES.PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="activityInstanceId != null">
        and RES.ID_ = #{activityInstanceId}
      </if>
      <if test="executionId != null">
        and RES.EXECUTION_ID_ = #{executionId}
      </if>
      <if test="processDefinitionId != null">
        and RES.PROC_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="activityId != null">
        and RES.ACT_ID_ = #{activityId}
      </if>
      <if test="activityName != null">
        and RES.ACT_NAME_ = #{activityName}
      </if>
      <if test="activityType != null">
        and RES.ACT_TYPE_ = #{activityType}
      </if>
      <if test="assignee != null">
        and RES.ASSIGNEE_ = #{assignee}
      </if>
      <if test="unfinished">
        and RES.END_TIME_ is null
      </if>
      <if test="finished">
       and RES.END_TIME_ is not null
      </if>
    </where>
  </sql>
  
  <select id="selectHistoricActivityInstanceByNativeQuery" parameterType="java.util.Map" resultMap="historicActivityInstanceResultMap">
    <if test="resultType == 'LIST_PAGE'">
      ${limitBefore}
    </if>
    ${sql}
    <if test="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </if>
  </select>
  
  <select id="selectHistoricActivityInstanceByNativeQuery_mssql_or_db2" parameterType="java.util.Map" resultMap="historicActivityInstanceResultMap">
    <if test="resultType == 'LIST_PAGE'">
        ${limitBeforeNativeQuery}
    </if>
    ${sql} 
    <if test="resultType == 'LIST_PAGE'">
      ${limitAfter}
    </if>
  </select>

  <select id="selectHistoricActivityInstanceCountByNativeQuery" parameterType="java.util.Map" resultType="long">
    ${sql}
  </select>
</mapper>
